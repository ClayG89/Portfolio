{"version":3,"sources":["components/BlogList.js","components/CommentList.js","components/Blog.js","components/Comment.js","components/ContactList.js","components/Contact.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["axios","defaults","xsrfCookieName","xsrfHeaderName","BlogList","state","error","blogs","fetchBlogs","a","get","res","setState","data","console","log","message","this","map","blog","key","id","to","title","Component","CommentList","comment","commentlist","newComment","body","name","getCommentList","then","response","foundCommentList","toggleCreateForm","newShowCreateForm","showCreateForm","updateComment","event","updatedNewComment","target","value","submitCreateComment","preventDefault","post","i","type","placeholder","onChange","className","onClick","Blog","comments","fetchBlog","blogId","blogResponse","props","match","params","Comment","newComments","fetchComment","commentId","commentResponse","postComment","toggleCreateform","ContactList","contactlist","newContact","firstname","lastname","company","phone","email","topic","getContactList","foundContact","updateContactList","updatedNewContact","submitCreateContactList","contact","onSubmit","submitCreateContact","Contact","fetchContact","contactId","contactResponse","componentDidMount","Home","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.1b59d18e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\n\naxios.defaults.xsrfCookieName = 'csrftoken'\naxios.defaults.xsrfHeaderName = 'X-CSRFToken'\n\nexport default class BlogList extends Component {\n    state = {\n        error: '',\n        blogs: []\n    }\n    componentDidMount(){\n        this.fetchBlogs();\n    }\n\n    fetchBlogs = async () => {\n        try {\n            const res = await axios.get('/api/v1/blogs/');\n            this.setState({blogs: res.data});\n        }\n        catch (err) {\n            console.log(err)\n            this.setState({error: err.message})\n        }\n    }\n    render() {\n        if (this.state.error){\n            return <div>{this.state.error}</div>\n        }\n        return (\n            <div>\n                <h1>All Blogs</h1>\n                {this.state.blogs.map(blog => (\n                    <div key={blog.id}>\n                        <Link to={`/blog/${blog.id}`} >{blog.title}</Link>\n                    </div>\n                ))}\n                \n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react'\nimport axios from 'axios'\n// import { Link } from 'react-router-dom'\n\naxios.defaults.xsrfCookieName = 'csrftoken'\naxios.defaults.xsrfHeaderName = 'X-CSRFToken'\n\nexport default class CommentList extends Component {\n\n    state = {\n        comment: [],\n        commentlist: [],\n        newComment: {\n            body: '',\n            name: '',\n            blog: '',\n          \n        }\n    }\n \n\n    getCommentList = () => {\n        axios.get('/api/v1/comments/').then((response) => {\n            const foundCommentList = response.data;\n            this.setState({\n                commentlist: foundCommentList\n            })\n        })\n    }\n \n\n    toggleCreateForm = () => {\n        const newShowCreateForm = !this.state.showCreateForm;\n        this.setState({\n            showCreateForm: newShowCreateForm,\n    });\n}\n    updateComment = (event) => {\n        const updatedNewComment = { ...this.state.newComment};\n        updatedNewComment[event.target.name] = event.target.value;\n        this.setState({\n            newComment: updatedNewComment,\n    });\n}\n    submitCreateComment = (event) => {\n        event.preventDefault();\n        axios.post('/api/v1/comments/', this.state.newComment).then(() => {\n        this.toggleCreateForm();\n        this.getCommentList();\n    });\n}\ncomponentDidMount() {\n    this.getCommentList()\n}\n    render() {\n        return (\n            <div>\n                {/* {`/comment/${comment.id}`} */}\n\n                {\n                    this.state.commentlist.map((comment, i) => {\n                        \n                        return (\n                            \n                            <div key={ comment.id }>\n                                <div>  \n                                    {this.state.comment.body} \n                                </div>\n                                <div>\n                                    {this.state.comment.name}\n                                </div>\n                               \n                                \n                            </div>\n                           \n                        )\n                    })\n                }\n                <h3>Comment Here</h3>\n                \n                    <div>\n                            <input type=\"text\" name=\"name\" placeholder=\"Your name\" onChange={ this.updateComment }/>                        \n                    </div>\n                    <div>                        \n                            <textarea className=\"textarea\" name=\"body\" placeholder=\"Add a comment\" onChange={ this.updateComment }></textarea>\n                    </div>\n                    \n                            <button onClick={this.submitCreateComment}>Submit</button>\n                   \n               \n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\nimport axios from 'axios';\n// import Comment from './Comment'\nimport CommentList from './CommentList';\n\n\naxios.defaults.xsrfCookieName = 'csrftoken'\naxios.defaults.xsrfHeaderName = 'X-CSRFToken'\n\nexport default class Blog extends Component {\n    state = {\n        blog: [],\n        comments: [],\n}\n\ncomponentDidMount() {\n    const blogId = this.props.match.params.id;\n    this.fetchBlog(blogId)\n   \n}\n\nfetchBlog = async (blogId) => {\n    try {\n        const blogResponse = await axios.get(`/api/v1/blogs/${blogId}/`)\n        this.setState({\n            blog: blogResponse.data,\n            comments: blogResponse.data.comments,\n        })\n    }\n    catch (error) {\n        console.log(error)\n        this.setState({error: error.message})\n    }\n}\n\nrender() {\n    return (\n        <div> \n            <div>          \n                <h2>{this.state.blog.title}</h2>\n                <p>{this.state.blog.blog}</p>\n            </div> \n            <div>\n                <h2>Comments</h2>\n                <CommentList />\n                {/* <Comment /> */}\n            </div> \n        </div>\n    );\n}\n}\n","import React, { Component } from 'react'\n// import { Link } from 'react-router-dom'\nimport axios from 'axios'\n\naxios.defaults.xsrfCookieName = 'csrftoken'\naxios.defaults.xsrfHeaderName = 'X-CSRFToken'\n\nexport default class Comment extends Component {\n        state = {\n            comment: [],\n            newComments: {},\n            \n        }\n        componentDidMount() {\n            const commentId = this.props.match.params.id;\n            this.fetchComment(commentId)\n        }\n        \n        fetchComment = async (commentId) => {\n            try {\n                const commentResponse = await axios.get(`/api/v1/comments/${commentId}/`)\n                this.setState({\n                    comment: commentResponse.data,\n                    blogs: commentResponse.data.blogs,\n                })\n            }\n            catch (error) {\n                console.log(error)\n                this.setState({error: error.message})\n            }\n        }\n        postComment = (event) => {\n           event.preventDefault();\n               axios.post('/api/v1/comments/', this.state.newComments).then(() => {\n               this.toggleCreateform();\n               this.fetchComment();\n               });\n           }\n        \n    render() {\n        return (\n            <div>\n                <h3>{this.state.comment.name}</h3>\n                <p>{this.state.comment.body}</p>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\nimport axios from 'axios'\nimport { Link } from 'react-router-dom'\n\n\naxios.defaults.xsrfCookieName = 'csrftoken'\naxios.defaults.xsrfHeaderName = 'X-CSRFToken'\n\n\nexport default class ContactList extends Component {\n    state = {\n        error: '',\n        contactlist: [],\n        newContact: {\n            firstname: '',\n            lastname: '',\n            company: '',\n            phone: '',\n            email: '',\n            topic: '',\n            message: '',\n        }\n\n    }\n    getContactList = () => {\n        axios.get('/api/v1/contacts/').then((response) => {\n            const foundContact = response.data;\n            this.setState({\n                contactlist: foundContact\n            })\n        })\n    }\n    toggleCreateForm = () => {\n        const newShowCreateForm = !this.state.showCreateForm;\n        this.setState({\n            showCreateForm: newShowCreateForm,\n        });\n    }\n    updateContactList = (event) => {\n        const updatedNewContact = { ...this.state.newContact };\n        updatedNewContact[event.target.name] = event.target.value;\n        this.setState({\n            newContact: updatedNewContact,\n        });\n    }\n    submitCreateContactList = (event) => {\n        event.preventDefault();\n        axios.post('/api/v1/contacts/', this.state.newContact).then(() => {\n            this.toggleCreateForm();\n            this.getContactList();\n        });\n    }\n    componentDidMount() {\n        this.getContactList()\n    }\n    render() {\n        return (\n            <div>\n\n                <h2>Contact Me</h2>\n\n                <div>\n\n                    {\n                        this.state.contactlist.map((contact, i) => {\n                            return (\n\n                                <div key={ i }>\n                                    <Link to={`/contact/${contact.id}`}>{contact.company}</Link>\n                                </div>\n\n                            )\n                        })\n                    }\n                </div>\n                <form onSubmit={this.updateContactList}>\n                    <div>\n                        <h4>First Name</h4>\n                        <input type=\"text\" name=\"firstname\" />\n                    </div>\n                    <div>\n                        <h4>Last Name</h4>\n                        <input type=\"text\" name=\"lastname\" />\n                    </div>\n                    <div>\n                        <h4>Company</h4>\n                        <input type=\"text\" name=\"company\" />\n                    </div>\n                    <div>\n                        <h4>Phone</h4>\n                        <input type=\"tel\" name=\"phone\" />\n                    </div>\n                    <div>\n                        <h4>email</h4>\n                        <input type=\"email\" name=\"email\" />\n                    </div>\n                    <div>\n                        <h4>Subject</h4>\n                        <input type=\"text\" name=\"topic\" />\n                    </div>\n                    <div>\n                        <h4>Message</h4>\n                        <textarea className=\"textarea\" name=\"message\" placeholder=\"Add a comment\"></textarea>\n                    </div>\n\n\n                    <button onClick={this.submitCreateContact}>Submit</button>\n                </form>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\nimport axios from 'axios'\n\naxios.defaults.xsrfCookieName = 'csrftoken'\naxios.defaults.xsrfHeaderName = 'X-CSRFToken'\n\nexport default class Contact extends Component {\n    state = {\n        contact: {},\n        contactlist: [],\n    }\n    componentDidMount() {\n        const contactId = this.props.match.params.id;\n        this.fetchContact(contactId)\n    }\n\n    fetchContact = async (contactId) => {\n        try {\n            const contactResponse = await axios.get(`/api/v1/contacts/${contactId}/?format=json`)\n            this.setState({\n                contact: contactResponse.data\n            })\n        }\n        catch (error) {\n            console.log(error)\n            this.setState({error: error.message})\n        }\n        console.log(this.componentDidMount)\n    }\n    render() {\n        return (\n            <div>\n                <header>\n                    \n                </header>\n    \n                <h2>Contact Detail</h2>\n                <h3>First Name:  { this.state.contact.firstname }</h3>\n                <h3>Last Name:  {this.state.contact.lastname}</h3>\n                <h3>Company:  {this.state.contact.company}</h3>\n                <h3>Phone:  {this.state.contact.phone}</h3>\n                <h3>email: {this.state.contact.email}</h3>\n                <h3>Message Subject: {this.state.contact.topic}</h3>\n                <h3>Message:  {this.state.contact.message}</h3>\n                {/* {this.state.contactlist.contact.body} */}\n              \n            </div>\n        );\n        }\n    }\n","import React, { Component } from 'react'\n\nexport default class Home extends Component {\n    render() {\n        return (\n            <div>\n                \n            </div>\n        )\n    }\n}\n","import React, {Component} from \"react\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport BlogList from \"./components/BlogList\";\nimport Blog from \"./components/Blog\";\nimport CommentList from \"./components/CommentList\";\nimport Comment from \"./components/Comment\";\nimport ContactList from \"./components/ContactList\";\nimport Contact from  \"./components/Contact\";\nimport Home from \"./components/Home\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n      return (\n          <Router>\n              <div className=\"App\">\n\n                  <div>\n                      <h1>Portfolio</h1>\n                  </div>\n\n                  <Switch>\n                    \n                    <Route exact path=\"/\" component={ Home }/>\n\n                    <Route exact path=\"/blog\" component={ BlogList }/>\n\n                    <Route path=\"/blog/:id\" component={ Blog }/>\n\n                    <Route exact path=\"/contact\" component={ ContactList }/>\n\n                    <Route path=\"/contact/:id\" component={ Contact }/>\n\n                    <Route exact path=\"/comment\" component={ CommentList }/>\n\n                    <Route path=\"/comment/:id\" component={ Comment }/>\n\n                  </Switch>\n              </div>\n          </Router>\n      )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}